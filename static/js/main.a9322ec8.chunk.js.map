{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","row","setRow","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","useEffect","a","fetch","then","response","json","data","clients","map","client","id","name","username","email","phone","website","getClientData","className","align","columns","title","field","defaultSort","icons","editable","onRowAdd","newRow","Promise","resolve","reject","updatedData","Math","floor","random","console","log","setTimeout","onRowUpdate","oldRow","tableData","onRowDelete","selectedRow","index","updatedRows","splice","options","paginationPosition","addRowPosition","actionsColumnIndex","headerStyle","backgroundColor","fontWeight","color","rowStyle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9322ec8.chunk.js","sourcesContent":["import React ,{useState,useEffect, forwardRef} from 'react';\nimport MaterialTable from 'material-table';\n\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\nimport './App.css';\nimport { LineWeight } from '@material-ui/icons';\n\n\nfunction App() {\n  const [row, setRow] = useState([]);\n  const tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n  };\n    \n  const columns = [\n    {title: \"Name\",field: \"name\",defaultSort:\"asc\"},\n    {title: \"Username\",field: \"username\",align:\"right\"},\n    {title: \"Email\",field: \"email\",align:\"right\"},\n    {title: \"Phone\",field: \"phone\",align:\"right\"},\n    {title: \"Website\",field: \"website\",align:\"right\"}\n  ]\n\n   useEffect(()=>{\n    const getClientData = async () =>{\n      await fetch(\"https://jsonplaceholder.typicode.com/users\").then((response) => response.json()).then((data) => {\n        const clients = data.map((client) => ({\n          id: client.id,\n          name: client.name,\n          username: client.username,\n          email: client.email,\n          phone: client.phone,\n          website: client.website\n        }));\n        setRow(clients);\n      })\n    }\n    getClientData();\n  },[])\n\n  return (\n    <div className=\"app\">\n      <h1 align=\"center\">Assignment</h1>\n      <div className=\"table\">\n        <MaterialTable \n          columns={columns} \n          data = {row}\n          icons={tableIcons}\n          title=\"Client Data\"\n          editable={{\n            onRowAdd:(newRow)=> new Promise((resolve,reject)=>{\n              const updatedData = [...row,{id: Math.floor(Math.random()*100) ,...newRow}];\n              console.log(newRow);\n              setTimeout(()=>{\n                setRow(updatedData);\n                resolve();\n                },500)\n            }),\n            onRowUpdate:(newRow,oldRow) => new Promise((resolve,reject)=>{\n              const updatedData = [...row]\n              updatedData[oldRow.tableData.id] = newRow\n              setRow(updatedData);\n              setTimeout(()=>resolve(),500)\n            }),\n            onRowDelete:(selectedRow) => new Promise((resolve,reject) =>{\n              const index = selectedRow.tableData.id;\n              const updatedRows = [...row];\n              updatedRows.splice(index,1);\n              setRow(updatedRows);\n              setTimeout(()=>resolve(),500)\n            })\n          }}\n          options={{\n            paginationPosition: \"both\", \n            addRowPosition: \"first\",\n            actionsColumnIndex: -1,\n            headerStyle: {\n              backgroundColor: 'white',\n              fontWeight: 'bold',\n              color: 'black'\n            },\n            rowStyle: {\n              backgroundColor: '#EEE',\n            }\n          }}\n        />  \n      </div> \n      <div></div>\n    </div>  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}